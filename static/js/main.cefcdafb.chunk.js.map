{"version":3,"sources":["Temprature.js","App.js","reportWebVitals.js","index.js"],"names":["Temprature","useState","cityname","setcityname","tempInfo","settempInfo","weathertypeicon","setweathertypeicon","getWeatherinfo","a","url","fetch","res","json","data","main","temp","pressure","humidity","temp_min","temp_max","weather_type","weather","speed","wind","country","sys","name","sunset","sunset_time","Date","toLocaleTimeString","console","log","useEffect","className","type","placeholder","autoFocus","value","onChange","e","target","onClick","toLocaleString","hour12","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cefcdafb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\nconst Temprature = () => {\r\n  const [cityname, setcityname] = useState(\"brisbane\");\r\n  const [tempInfo, settempInfo] = useState({});\r\n  const [weathertypeicon, setweathertypeicon] = useState(\"\");\r\n\r\n  const getWeatherinfo = async () => {\r\n    try {\r\n      let url = `http://api.openweathermap.org/data/2.5/weather?q=${cityname}&units=metric&APPID=35f3526354aa467824b3c20536732b26`;\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      // console.log(data);\r\n      const { temp, pressure, humidity, temp_min, temp_max } = data.main;\r\n      const { main: weather_type } = data.weather[0];\r\n      const { speed } = data.wind;\r\n      const { country } = data.sys;\r\n      const { name } = data;\r\n      var { sunset } = data.sys;\r\n      const sunset_time = new Date(sunset * 1000);\r\n      sunset = sunset_time.toLocaleTimeString();\r\n      // console.log(sunset_time.toLocaleTimeString());\r\n      // sunrise = new Date(sunrise.toLocaleString);\r\n\r\n      const weatherInfo = {\r\n        temp,\r\n        pressure,\r\n        humidity,\r\n        weather_type,\r\n        speed,\r\n        country,\r\n        sunset,\r\n        name,\r\n        temp_min,\r\n        temp_max,\r\n      };\r\n      settempInfo(weatherInfo);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (tempInfo.weather_type) {\r\n      switch (tempInfo.weather_type) {\r\n        case \"Clouds\":\r\n          setweathertypeicon(\"wi-day-cloudy\");\r\n\r\n          break;\r\n        case \"Rain\":\r\n          setweathertypeicon(\"wi-day-rain\");\r\n\r\n          break;\r\n        case \"Haze\":\r\n          setweathertypeicon(\"wi-day-haze\");\r\n\r\n          break;\r\n        case \"Snow\":\r\n          setweathertypeicon(\"wi-day-snow\");\r\n\r\n          break;\r\n        case \"Smoke\":\r\n          setweathertypeicon(\"wi-smoke\");\r\n\r\n          break;\r\n        case \"Clear\":\r\n          setweathertypeicon(\"wi-cloud\");\r\n\r\n          break;\r\n\r\n        default:\r\n          setweathertypeicon(\"wi-day-sunny\");\r\n\r\n          break;\r\n      }\r\n    }\r\n  }, [tempInfo.weather_type]);\r\n\r\n  useEffect(() => {\r\n    getWeatherinfo();\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"wrap\">\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder=\"Your City Name\"\r\n            autoFocus\r\n            value={cityname}\r\n            onChange={(e) => setcityname(e.target.value)}\r\n            className=\"searchTerm\"\r\n          />\r\n          <button\r\n            className=\"searchButton\"\r\n            type=\"button\"\r\n            onClick={getWeatherinfo}\r\n          >\r\n            Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"widget\">\r\n        <div className=\"weatherIcon\">\r\n          <i className={`wi ${weathertypeicon}`}></i>\r\n        </div>\r\n\r\n        <div className=\"weatherInfo\">\r\n          <div className=\"temperature\">\r\n            <span> {tempInfo.temp} &deg;</span>\r\n          </div>\r\n\r\n          <div className=\"description\">\r\n            <div className=\"weatherCondition\">{tempInfo.weather_type}</div>\r\n            <div className=\"place\">\r\n              {tempInfo.name} - {tempInfo.country}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"date\">\r\n          {new Date().toLocaleString(\"en-GB\", {\r\n            dateStyle: \"medium\",\r\n            timeStyle: \"short\",\r\n            hour12: true,\r\n          })}\r\n        </div> */}\r\n        <div className=\"date\">\r\n          {new Date().toLocaleString(\"en-GB\", { hour12: true })}\r\n        </div>\r\n\r\n        {/* 4 COLUMN SECTON */}\r\n        <div className=\"extra-temp\">\r\n          {/* SUNSET TIME */}\r\n          <div className=\"temp-info-minmax\">\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-sunset\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {tempInfo.sunset} <br />\r\n                Sun Set\r\n              </p>\r\n            </div>\r\n            {/* HUMIDITY % */}\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-humidity\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {tempInfo.humidity} %\r\n                <br />\r\n                Humidity\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"weather-extra-info\">\r\n            {/*MIN MAX TEMPEATURE*/}\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-celsius\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                Min - {tempInfo.temp_min} <br />\r\n                Max - {tempInfo.temp_max}\r\n              </p>\r\n            </div>\r\n            {/* WIND SPEED */}\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-strong-wind\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {tempInfo.speed} m/s\r\n                <br />\r\n                WIND SPEED\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Temprature;\r\n","import \"./App.css\";\nimport Temprature from \"./Temprature\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Temprature />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}