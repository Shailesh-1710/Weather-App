{"version":3,"sources":["Temprature.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","Temprature","useState","tempInfo","settempInfo","weathertypeicon","setweathertypeicon","searchValue","setsearchValue","handleSelect","value","a","geocodeByAddress","results","getLatLng","latlng","getWeatherinfo","lat","lng","proplat","proplong","url","process","fetch","res","json","data","main","temp","pressure","humidity","temp_min","temp_max","weather_type","weather","speed","wind","country","sys","name","sunset","sunset_time","Date","toLocaleTimeString","console","log","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","className","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","description","placeId","toLocaleString","hour12","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a3c97d2.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\nrequire(\"dotenv\").config();\r\n\r\nconst Temprature = () => {\r\n  const api = process.env.REACT_APP_WAPI;\r\n  const [tempInfo, settempInfo] = useState({});\r\n  const [weathertypeicon, setweathertypeicon] = useState(\"\");\r\n  const [searchValue, setsearchValue] = useState(\"\");\r\n\r\n  const handleSelect = async (value) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latlng = await getLatLng(results[0]);\r\n    // console.log(latlng);\r\n    // console.log(latlng.lat, latlng.lng);\r\n    // // setlong(latlng.lng);\r\n    // // setlat(latlng.lat);\r\n\r\n    getWeatherinfo(latlng.lat, latlng.lng);\r\n  };\r\n\r\n  const getWeatherinfo = async (proplat, proplong) => {\r\n    try {\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${proplat}&lon=${proplong}&units=metric&appid=${api}`;\r\n\r\n      // console.log(proplat, proplong);\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n\r\n      const { temp, pressure, humidity, temp_min, temp_max } = data.main;\r\n      const { main: weather_type } = data.weather[0];\r\n      const { speed } = data.wind;\r\n      const { country } = data.sys;\r\n      const { name } = data;\r\n      var { sunset } = data.sys;\r\n      const sunset_time = new Date(sunset * 1000);\r\n      sunset = sunset_time.toLocaleTimeString();\r\n      // console.log(sunset_time.toLocaleTimeString());\r\n      // sunrise = new Date(sunrise.toLocaleString);\r\n\r\n      if (weather_type) {\r\n        switch (weather_type) {\r\n          case \"Clouds\":\r\n            setweathertypeicon(\"wi-day-cloudy\");\r\n\r\n            break;\r\n          case \"Rain\":\r\n            setweathertypeicon(\"wi-day-rain\");\r\n\r\n            break;\r\n          case \"Haze\":\r\n            setweathertypeicon(\"wi-day-haze\");\r\n\r\n            break;\r\n          case \"Snow\":\r\n            setweathertypeicon(\"wi-day-snow\");\r\n\r\n            break;\r\n          case \"Smoke\":\r\n            setweathertypeicon(\"wi-smoke\");\r\n\r\n            break;\r\n          case \"Clear\":\r\n            setweathertypeicon(\"wi-cloud\");\r\n            break;\r\n\r\n          default:\r\n            setweathertypeicon(\"wi-day-sunny\");\r\n            break;\r\n        }\r\n      }\r\n      const weatherInfo = {\r\n        temp,\r\n        pressure,\r\n        humidity,\r\n        weather_type,\r\n        speed,\r\n        country,\r\n        sunset,\r\n        name,\r\n        temp_min,\r\n        temp_max,\r\n      };\r\n      settempInfo(weatherInfo);\r\n    } catch (error) {\r\n      console.log(\"ERROR COUGHT IN getWeatherinfo FUNC \");\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      // console.log(position.coords.latitude, \",\", position.coords.longitude);\r\n      getWeatherinfo(position.coords.latitude, position.coords.longitude);\r\n\r\n      // setlat(position.coords.latitude);\r\n      // setlong(position.coords.longitude);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/*-------------- SEARCHBAR DIV---------- */}\r\n      <div className=\"wrap\">\r\n        <div>\r\n          <PlacesAutocomplete\r\n            onChange={setsearchValue}\r\n            onSelect={handleSelect}\r\n            value={searchValue}\r\n          >\r\n            {({\r\n              getInputProps,\r\n              suggestions,\r\n              getSuggestionItemProps,\r\n              loading,\r\n            }) => (\r\n              <div>\r\n                <input\r\n                  className=\"searchbar\"\r\n                  {...getInputProps({ placeholder: \"Please Type City Name\" })}\r\n                />\r\n                <div>\r\n                  {loading ? <div>Loading</div> : null}\r\n                  {suggestions.map((suggestion) => {\r\n                    return (\r\n                      <div\r\n                        key={suggestion.placeId}\r\n                        className=\"suggestions\"\r\n                        {...getSuggestionItemProps(suggestion)}\r\n                      >\r\n                        {suggestion.description}\r\n                        {/* {console.log(suggestion)} */}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </PlacesAutocomplete>\r\n        </div>\r\n        {/*-------------- SEARCHBAR DIV  ENDED ---------- */}\r\n\r\n        {/*-------------- WIDGET BOX DIV  ---------- */}\r\n      </div>\r\n      <div className=\"widget\">\r\n        <div className=\"weatherIcon\">\r\n          <i className={`wi ${weathertypeicon}`}></i>\r\n        </div>\r\n\r\n        <div className=\"weatherInfo\">\r\n          <div className=\"temperature\">\r\n            <span> {tempInfo.temp} &deg;</span>\r\n          </div>\r\n\r\n          <div className=\"description\">\r\n            <div className=\"weatherCondition\">{tempInfo.weather_type}</div>\r\n            <div className=\"place\">\r\n              {tempInfo.name} - {tempInfo.country}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"date\">\r\n          {new Date().toLocaleString(\"en-GB\", {\r\n            dateStyle: \"medium\",\r\n            timeStyle: \"short\",\r\n            hour12: true,\r\n          })}\r\n        </div> */}\r\n        <div className=\"date\">\r\n          {new Date().toLocaleString(\"en-GB\", { hour12: true })}\r\n        </div>\r\n\r\n        {/* 4 COLUMN SECTON */}\r\n        <div className=\"extra-temp\">\r\n          {/* SUNSET TIME */}\r\n          <div className=\"temp-info-minmax\">\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-sunset\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {tempInfo.sunset} <br />\r\n                Sun Set\r\n              </p>\r\n            </div>\r\n            {/* HUMIDITY % */}\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-humidity\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {tempInfo.humidity} %\r\n                <br />\r\n                Humidity\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"weather-extra-info\">\r\n            {/*MIN MAX TEMPEATURE*/}\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-celsius\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                Min - {tempInfo.temp_min} <br />\r\n                Max - {tempInfo.temp_max}\r\n              </p>\r\n            </div>\r\n            {/* WIND SPEED */}\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-strong-wind\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {tempInfo.speed} m/s\r\n                <br />\r\n                WIND SPEED\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* -------------- WIDGET BOX DIV  ENDED ---------- */}\r\n    </>\r\n  );\r\n};\r\nexport default Temprature;\r\n","import \"./App.css\";\nimport Temprature from \"./Temprature\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Temprature />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}