{"version":3,"sources":["Temprature.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","Temprature","useState","tempInfo","settempInfo","weathertypeicon","setweathertypeicon","searchValue","setsearchValue","latitude","longitude","setgeolocation","handleSelect","value","a","geocodeByAddress","results","getLatLng","latlng","getWeatherinfo","lat","lng","proplat","proplong","url","process","fetch","res","json","data","main","temp","pressure","humidity","temp_min","temp_max","weather_type","weather","speed","wind","country","sys","name","sunset","sunset_time","Date","toLocaleTimeString","weatherInfo","toast","console","log","useEffect","navigator","geolocation","getCurrentPosition","position","coords","error","warn","className","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","description","placeId","Math","round","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34995f2c.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nconst Temprature = () => {\r\n  const api = process.env.REACT_APP_WAPI;\r\n  const [tempInfo, settempInfo] = useState({});\r\n  const [weathertypeicon, setweathertypeicon] = useState(\"\");\r\n  const [searchValue, setsearchValue] = useState(\"\");\r\n  const [geolocation, setgeolocation] = useState({\r\n    latitude: \"\",\r\n    longitude: \"\",\r\n  });\r\n\r\n  const handleSelect = async (value) => {\r\n    const results = await geocodeByAddress(value);\r\n    const latlng = await getLatLng(results[0]);\r\n    getWeatherinfo(latlng.lat, latlng.lng);\r\n    setgeolocation({ latitude: latlng.lat, longitude: latlng.lng });\r\n  };\r\n\r\n  const getWeatherinfo = async (proplat, proplong) => {\r\n    try {\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${proplat}&lon=${proplong}&units=metric&appid=${api}`;\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      const { temp, pressure, humidity, temp_min, temp_max } = data.main;\r\n      const { main: weather_type } = data.weather[0];\r\n      const { speed } = data.wind;\r\n      const { country } = data.sys;\r\n      const { name } = data;\r\n      var { sunset } = data.sys;\r\n      const sunset_time = new Date(sunset * 1000);\r\n      sunset = sunset_time.toLocaleTimeString();\r\n      setgeolocation({ latitude: proplat, longitude: proplong });\r\n      // sunrise = new Date(sunrise.toLocaleString);\r\n      const weatherInfo = {\r\n        temp,\r\n        pressure,\r\n        humidity,\r\n        weather_type,\r\n        speed,\r\n        country,\r\n        sunset,\r\n        name,\r\n        temp_min,\r\n        temp_max,\r\n      };\r\n      settempInfo(weatherInfo);\r\n      // NOTIFICATION TOAST\r\n      toast(`Displaying Weather For ${weatherInfo.name}`);\r\n      if (weather_type) {\r\n        switch (weather_type) {\r\n          case \"Clouds\":\r\n            setweathertypeicon(\"wi-day-cloudy\");\r\n\r\n            break;\r\n          case \"Rain\":\r\n            setweathertypeicon(\"wi-day-rain\");\r\n\r\n            break;\r\n          case \"Haze\":\r\n            setweathertypeicon(\"wi-day-haze\");\r\n\r\n            break;\r\n          case \"Snow\":\r\n            setweathertypeicon(\"wi-day-snow\");\r\n\r\n            break;\r\n          case \"Smoke\":\r\n            setweathertypeicon(\"wi-smoke\");\r\n\r\n            break;\r\n          case \"Clear\":\r\n            setweathertypeicon(\"wi-cloud\");\r\n            break;\r\n\r\n          default:\r\n            setweathertypeicon(\"wi-day-sunny\");\r\n            break;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ERROR COUGHT IN getWeatherinfo FUNC \");\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    try {\r\n      navigator.geolocation.getCurrentPosition(function (position) {\r\n        getWeatherinfo(position.coords.latitude, position.coords.longitude);\r\n      });\r\n    } catch (error) {\r\n      toast.warn(\"Location Denied. \");\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/*-------------- SEARCHBAR DIV---------- */}\r\n      <div className=\"wrap\">\r\n        <div>\r\n          <ToastContainer />;\r\n          <PlacesAutocomplete\r\n            onChange={setsearchValue}\r\n            onSelect={handleSelect}\r\n            value={searchValue}\r\n          >\r\n            {({\r\n              getInputProps,\r\n              suggestions,\r\n              getSuggestionItemProps,\r\n              loading,\r\n            }) => (\r\n              <div>\r\n                <input\r\n                  className=\"searchbar\"\r\n                  {...getInputProps({ placeholder: \"Please Type City Name\" })}\r\n                />\r\n                <div>\r\n                  {loading ? (\r\n                    <div className=\"suggestions\">\r\n                      Searching For Results From Google Maps\r\n                    </div>\r\n                  ) : null}\r\n                  {suggestions.map((suggestion) => {\r\n                    return (\r\n                      <div\r\n                        key={suggestion.placeId}\r\n                        className=\"suggestions\"\r\n                        {...getSuggestionItemProps(suggestion)}\r\n                      >\r\n                        {suggestion.description}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </PlacesAutocomplete>\r\n        </div>\r\n        {/*-------------- SEARCHBAR DIV  ENDED ---------- */}\r\n        {/*-------------- WIDGET BOX DIV  ---------- */}\r\n      </div>\r\n      <div className=\"widget\">\r\n        <div className=\"weatherIcon\">\r\n          <i className={`wi ${weathertypeicon}`}></i>\r\n        </div>\r\n\r\n        <div className=\"weatherInfo\">\r\n          <div className=\"temperature\">\r\n            <span> {Math.round(tempInfo.temp)} &deg;</span>\r\n          </div>\r\n\r\n          <div className=\"description\">\r\n            <div className=\"weatherCondition\">{tempInfo.weather_type}</div>\r\n            <div className=\"place\">\r\n              {tempInfo.name} - {tempInfo.country}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"date\">\r\n          <div>HELLO</div>\r\n          {/* {geolocation.latitude}\r\n          {geolocation.longitude} */}\r\n        </div>\r\n\r\n        {/* 4 COLUMN SECTON */}\r\n        <div className=\"extra-temp\">\r\n          {/* SUNSET TIME */}\r\n          <div className=\"temp-info-minmax\">\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-sunset\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {tempInfo.sunset} <br />\r\n                Sun Set\r\n              </p>\r\n            </div>\r\n            {/* HUMIDITY % */}\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-humidity\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {tempInfo.humidity} %\r\n                <br />\r\n                Humidity\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"weather-extra-info\">\r\n            {/*MIN MAX TEMPEATURE*/}\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-celsius\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                Min : {Math.round(tempInfo.temp_min)} <br />\r\n                Max : {Math.round(tempInfo.temp_max)}\r\n              </p>\r\n            </div>\r\n            {/* WIND SPEED */}\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className=\"wi wi-strong-wind\"></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {tempInfo.speed} m/s\r\n                <br />\r\n                WIND SPEED\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* -------------- WIDGET BOX DIV  ENDED ---------- */}\r\n    </>\r\n  );\r\n};\r\nexport default Temprature;\r\n","import \"./App.css\";\nimport Temprature from \"./Temprature\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Temprature />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}